name: "Build Android app"

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Java
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "adopt"
          cache: "gradle"

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Setup Node  
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Run Yarn Install
        run: |
             yarn install             
      - name: Build application
        run: |
             cd ./android &&
             ./gradlew assembleRelease  
            
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.TOKEN_HUB_RELEASE}}
        with:
          tag_name: v1.0.2
          release_name: Release 1.0.2
          draft: false
          prerelease: false
          body: |
            Add release notes or description here.

      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: APK Release
          path: app/build/outputs/apk/release/app-release.apk

      - name: Get APK Artifact URL
        id: get_apk_url
        run: echo "::set-output name=url::$(echo \${{ steps.upload.outputs.artifact_url }} | sed -e 's/artifacts/github.com/')"

      - name: Update Release
        id: update_release
        uses: actions/github-script@v4
        env:
          GITHUB_TOKEN: ${{secrets.TOKEN_HUB_RELEASE}}
        with:
          script: |
            const response = await github.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: 'v1.0.2' // Specify the tag you used for the release
            });
            const release = response.data;
            release.upload_url = '${{ steps.get_apk_url.outputs.url }}';
            await github.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              tag_name: release.tag_name,
              name: release.name,
              body: release.body,
              draft: release.draft,
              prerelease: release.prerelease,
              target_commitish: release.target_commitish
            });
